AWSTemplateFormatVersion: 2010-09-09
Description: >-
  stak
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  MessagePublisherQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: stak-message-publisher-q
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MessagePublisherQueueDLQ.Arn
        maxReceiveCount: 3
  MessagePublisherQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: stak-message-publisher-dlq
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  GetAllMessagesFn:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
        - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        MainFields: "package.json"
        EntryPoints:
        - get-messages.ts
        External:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/lib-dynamodb"
    Properties:
      CodeUri: src/handlers/
      Handler: get-messages.handler
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      - SQSSendMessagePolicy:
          QueueName: !GetAtt MessagePublisherQ.QueueName
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DDB_TABLE_NAME: !Ref SampleTable
          NODE_OPTIONS: --enable-source-maps
          SQS_MESSAGE_PUBLISHER_Q_URL: !Ref MessagePublisherQ
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/messages
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  GetMessageByIdFn:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
        - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        MainFields: "package.json"
        EntryPoints:
        - get-message-by-id.ts
        External:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/lib-dynamodb"
    Properties:
      CodeUri: src/handlers/
      Handler: get-message-by-id.handler
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DDB_TABLE_NAME: !Ref SampleTable
          NODE_OPTIONS: --enable-source-maps
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/messages/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  AdminPublishMessageFn:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        Target: "es2020"
        OutExtension:
        - .js=.mjs
        Sourcemap: true
        MainFields: "package.json"
        EntryPoints:
        - admin-publish-message.ts
        External:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/lib-dynamodb"
    Properties:
      CodeUri: src/handlers/
      Handler: admin-publish-message.handler
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Post a message. Create a message onto DynamoDB (Generated Id) and send a message publisher to the Queue. In case it is public message.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DDB_TABLE_NAME: !Ref SampleTable
          NODE_OPTIONS: --enable-source-maps
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/messages
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
